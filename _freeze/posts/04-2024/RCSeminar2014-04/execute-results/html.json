{
  "hash": "9c2639723833a7bc82a07b318ca994ae",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"04 -- The resource-consumer competition model\"\nauthor: \"Christopher Klausmeier; Liang Xu\"\ndate: \"2024-02-15\"\ncategories: [Lectures]\nfilters:\n  - shinylive\n---\n\n\n\n\nIn this session, we discussed about the resource-consumer model.\n\n# Materials\n\nThe video record of the seminar can be found [HERE](https://youtu.be/uC_A-Qfrqx0){target=\"_blank\"}.\n\nThe Mathematica notebook is [HERE](https://github.com/xl0418/ResourceCompetitionSeminarPosts-Docs/blob/main/04-2024/Docs/4%20-%20resource%20competition%20DONE.nb){target=\"_blank\"}.\n\n# Model\n\nThe two-species resource-consumer competition model is defined as\n\n$$\n\\begin{aligned}\n\\frac{dN_1}{dt} &=  \\left(\\mu_1 - m \\right) N_1 \\\\\n\\frac{dN_2}{dt} &=  \\left(\\mu_2 - m \\right) N_2 \\\\\n\\frac{dR}{dt} &=  a \\left(R_{in}-R \\right) - V_1 N_1 - V_2 N_2\n\\end{aligned}\n$$\n\nwhere $N_1$, $N_2$ are the population sizes of species 1 and 2, respectively. $\\mu_1$ and $\\mu_2$ are the growth rates while $V_1$ and $V_2$ are the consumption rates. $m$ is the background mortality rate. For the dynamics of the resource, $R_{in}$ denotes for the inflow concentration and $a$ is the dilution rate.\n\nThe growth rate often follows the functional form of Mechanis-Menten-Monod:\n\n$$\n\\begin{aligned}\n\\mu:=\\mu_{max}\\frac{R}{R+K}\n\\end{aligned}\n$$\n\nwhere $\\mu_{max}$ is the maximum growth rate when the resource is adequate. $K$ is the half-saturation rate. Therefore, the growth rate when the resoruce is at low density is given by the slope of this function at low $R$\n\n$$\n\\frac{\\mu_{max}}{K}\n$$\n\nGiven the nonlinearity of the growth rate, the curves may cross. So, imagine a situation where Species 1 has a larger growth rate when the resource is sufficient while Species 2 has a higher growth rate when the resource is scarce,\n\n$$\n\\mu_{1,max}>\\mu_{2,max};\\frac{\\mu_{1,max}}{K_1}<\\frac{\\mu_{2,max}}{K_2}\n$$\n\n**which species** will win?\n\n## The simulation\n\nTry on this interactive plot and see which species would win.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| viewerWidth: 900\nlibrary(shiny)\nlibrary(bslib)\nlibrary(plotly)\nlibrary(Matrix)\n\ngrowth_rate <- function(mu_max,k, R){\n  return(mu_max * R / (R + k))\n}\n\n\nSim_rc <- function(tt, mu11, mu12, mu21, mu22,\n                   k11,k12,k21,k22,\n                   v11, v12, v21, v22,\n                   r1in, r2in,\n                   N10, N20, R10, R20,\n                   m,\n                   mode) {\n  N1 <- c(N10)\n  N2 <- c(N20)\n  R1 <- c(R10)\n  R2 <- c(R20)\n  for(ti in 1:tt){\n    temp_N1 <- N1[ti]\n    temp_N2 <- N2[ti]\n    temp_R1 <- R1[ti]\n    temp_R2 <- R2[ti]\n    for(tii in 1:100){\n      if(mode == \"ess\"){\n        mu1 <- min(growth_rate(mu11, k11, temp_R1), growth_rate(mu12, k12, temp_R2))\n        mu2 <- min(growth_rate(mu21, k21, temp_R1), growth_rate(mu22, k22, temp_R2))\n        c11 <- min(growth_rate(v11, k11, temp_R1), growth_rate(v12, k12, temp_R2))\n        c12 <- min(growth_rate(v11, k11, temp_R1), growth_rate(v12, k12, temp_R2))\n        c21 <- min(growth_rate(v21, k21, temp_R1), growth_rate(v22, k22, temp_R2))\n        c22 <- min(growth_rate(v21, k21, temp_R1), growth_rate(v22, k22, temp_R2))\n        \n      } else {\n        mu1 <- growth_rate(mu11, k11, temp_R1) + growth_rate(mu12, k12, temp_R2)\n        mu2 <- growth_rate(mu21, k21, temp_R1) + growth_rate(mu22, k22, temp_R2)\n        c11 <- v11\n        c12 <- v12\n        c21 <- v21\n        c22 <- v22\n      }\n      \n      dN1 <- (mu1 - m) * temp_N1 / 100\n      dN2 <- (mu2 - m) * temp_N2 / 100\n      dR1 <- ((r1in - temp_R1) - c11 * temp_N1 - c21 * temp_N2) / 100\n      dR2 <- ((r2in - temp_R2) - c12 * temp_N1 - c22 * temp_N2) / 100\n      \n      temp_N1 <- max(temp_N1 + dN1, 0)\n      temp_N2 <- max(temp_N2 + dN2, 0)\n      temp_R1 <- max(temp_R1 + dR1, 0)\n      temp_R2 <- max(temp_R2 + dR2, 0)\n      \n    }\n    \n    N1 <- c(N1, temp_N1)\n    N2 <- c(N2, temp_N2)\n    \n    R1 <- c(R1, temp_R1)\n    R2 <- c(R2, temp_R2)\n  }\n  return(data.frame(N1 = N1, N2 = N2, R1 = R1, R2 = R2, cc = 1:(tt+1)))\n  \n}\n\n\n# Define UI for app that draws a histogram ----\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n  headerPanel(''),\n  \n  fluidRow(\n    column(12, \n           textOutput(\"text\"),\n           tags$head(tags$style(\"#text{color: black;\n                                 font-size: 30px;\n                                 font-style: italic;\n                                 }\"\n           )\n           ),\n           plotlyOutput(\"plot1\", width=700, height=250),\n           plotlyOutput(\"plot2\", width=700, height=250)\n    )\n  ), \n  \n  fluidRow(\n    column(4, \n           div(style=\"height: 80px;\",sliderInput('mu1max', HTML(\"&mu;<sub>1,max</sub>\"), 1.4, min = 0.1, max = 2)),\n           div(style=\"height: 80px;\",sliderInput('mu2max', HTML(\"&mu;<sub>2,max</sub>\"), 1.1, min = 0.1, max = 2))\n    ),\n    column(4,\n           div(style=\"height: 80px;\", sliderInput('k1', HTML(\"K<sub>1</sub>\"), 2.5, min = 0.1, max = 3)),\n           div(style=\"height: 80px;\",sliderInput('k2', HTML(\"K<sub>2</sub>\"), 0.4, min = 0.1, max = 3))\n    ),\n    column(4,\n           div(style=\"height: 80px;\", sliderInput('m', \"m\", 0.4, min = 0.01, max = 1)),\n    )\n  )\n  \n  \n)\n\nserver <- function(input, output, session) {\n  output$text <- renderText({\n    \"Mechanis-Menten-Monod growth\"\n  })\n  \n  \n  \n  \n  # sim lv model\n  sim_result <- reactive({\n    Sim_rc(100, input$mu1max, 0, input$mu2max, 0,\n           input$k1,0, input$k2, 0,\n           3 * input$mu1max,  0, 3 * input$mu2max,0,\n           10, 10, 0.1, 0.1, 1, 1, input$m,\n           \"sub\")\n  })\n  # browser()\n  \n  output$plot1 <- renderPlotly({\n      R <- seq(0, 10, 0.01)\n      \n      mu1 <-reactive({\n        growth_rate(input$mu1max, input$k1, R)\n      })\n      \n      \n      mu2 <-reactive({\n        growth_rate(input$mu2max, input$k2, R)\n      })\n      \n      gr <- data.frame(re = R, mu1 = mu1(), mu2 = mu2())\n      # browser()\n      p <- plot_ly(data = gr) %>%\n        add_trace(x = ~re, y = ~mu1, type = 'scatter', mode = 'lines', name = 'Species 1') %>%\n        add_trace(x = ~re, y = ~mu2, type = 'scatter', mode = 'lines', name = 'Species 2')\n        \n      p <- p %>%\n        add_segments(y=input$m, yend = input$m, x = 0, xend=10, type = 'scatter', mode = 'lines', name = \"m\")\n   \n      # xlim\n      # p <- p %>% layout(xaxis = list(range = c(0, 2)),\n      #                   yaxis = list(range = c(0, 2)))\n      \n      \n      \n      \n      p\n  })\n  \n  output$plot2 <- renderPlotly({\n    \n    # browser()\n    p <- plot_ly(data = sim_result()) %>%\n      add_trace(x = ~cc, y = ~N1, type = 'scatter', mode = 'lines', name = 'Species 1') %>%\n      add_trace(x = ~cc, y = ~N2, type = 'scatter', mode = 'lines', name = 'Species 2')\n    \n\n    # xlim\n    # p <- p %>% layout(xaxis = list(range = c(0, 2)),\n    #                   yaxis = list(range = c(0, 2)))\n    \n    \n    \n    \n    p\n  })\n\n}\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\n# The zero-net-growth-isocline (ZNGI) analysis of a two-species-two-resource model\n\nThe ZNGI analysis we talked in the previous lecture on the Lotka-Volterra model can also infer the outcome of the competition on the resource-consumer model. For simplicity, we just assume that the growth rate is linear.\n\n## The essential resource model\n\nThe two-species-two-essential-resource model is given by\n\n$$\n\\begin{aligned}\n\\frac{dN_1}{dt} &=  \\left( \\min(\\mu_{11}R_1, \\mu_{12}R_2) - m \\right) N_1\\\\\n\\frac{dN_2}{dt} &=  \\left( \\min(\\mu_{21}R_1, \\mu_{22}R_2) - m \\right) N_2\\\\\n\\frac{dR_1}{dt} &=  a \\left(R_{1,in}-R_1 \\right) - \\min(V_{11}R_1, V_{12}R_2) N_1 - \\min(V_{21}R_1, V_{22}R_2) N_2 \\\\\n\\frac{dR_2}{dt} &=  a \\left(R_{2,in}-R_2 \\right) - \\min(V_{11}R_1, V_{12}R_2) N_1 - \\min(V_{21}R_1, V_{22}R_2) N_2 \\\\\n\\end{aligned}\n$$\n\n## The substitutable resource model\n\nThe two-species-two-substitutable-resource model is given by\n\n$$\n\\begin{aligned}\n\\frac{dN_1}{dt} &=  \\left( \\mu_{11}R_1 + \\mu_{12}R_2 - m \\right) N_1\\\\\n\\frac{dN_2}{dt} &=  \\left( \\mu_{21}R_1 + \\mu_{22}R_2 - m \\right) N_2\\\\\n\\frac{dR_1}{dt} &=  a \\left(R_{1,in}-R_1 \\right) - V_{11}R_1 N_1 - V_{21}R_1 N_2 \\\\\n\\frac{dR_2}{dt} &=  a \\left(R_{2,in}-R_2 \\right) - V_{12}R_2 N_1 - V_{22}R_2 N_2 \\\\\n\\end{aligned}\n$$\n\n## The ZNGI analysis\n\nWe take the essential resource competition model as an example. The ZNGIs of the two species are given by\n\n$$\n\\begin{aligned}\n\\min(\\mu_{11}R_1, \\mu_{12}R_2) - m  &= 0\\\\\n\\min(\\mu_{21}R_1, \\mu_{22}R_2) - m  &= 0\n\\end{aligned}\n$$\n\nwhich gives the two \"L\" shaped ZNGIs in the plot.\n\nIf the two ZNGIs cross, the crossing point is a potential coexistence destination. Whether it is a stable equilibrium relies on the impact vectors and the resource supply rates. See [Lecture 2](https://xl0418.github.io/ResourceCompetitionSeminar/posts/02-2024/RCSeminar2014.html){target=\"_blank\"} for details.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 800\n#| viewerWidth: 1000\nlibrary(shiny)\nlibrary(bslib)\nlibrary(plotly)\nlibrary(Matrix)\n\n\nSim_rc_ess <- function(tt, mu11, mu12, mu21, mu22,\n                   q11, q12, q21, q22,\n                   r1in, r2in,\n                   N10, N20, R10, R20,\n                   m) {\n  N1 <- c(N10)\n  N2 <- c(N20)\n  R1 <- c(R10)\n  R2 <- c(R20)\n  for(ti in 1:tt){\n    temp_N1 <- N1[ti]\n    temp_N2 <- N2[ti]\n    temp_R1 <- R1[ti]\n    temp_R2 <- R2[ti]\n    for(tii in 1:100){\n\n      mu1 <- min(mu11 * temp_R1, mu21 * temp_R2)\n      mu2 <- min(mu12 * temp_R1, mu22 * temp_R2)\n\n      \n      dN1 <- (mu1  - m) * temp_N1 / 100\n      dN2 <- (mu2  - m) * N2[ti] / 100\n      dR1 <- ((r1in - temp_R1) - q11 * mu1 * temp_N1 - q12 * mu2 * temp_N2) / 100\n      dR2 <- ((r2in - temp_R2) - q21 * mu1 * temp_N1 - q22 * mu2 * temp_N2) / 100\n      \n      temp_N1 <- max(temp_N1 + dN1, 0)\n      temp_N2 <- max(temp_N2 + dN2, 0)\n      temp_R1 <- max(temp_R1 + dR1, 0)\n      temp_R2 <- max(temp_R2 + dR2, 0)\n      \n    }\n    \n    N1 <- c(N1, temp_N1)\n    N2 <- c(N2, temp_N2)\n    \n    R1 <- c(R1, temp_R1)\n    R2 <- c(R2, temp_R2)\n  }\n  return(data.frame(N1 = N1, N2 = N2, R1 = R1, R2 = R2, cc = 1:(tt+1)))\n  \n}\n\n\nSim_rc_sub <- function(tt, mu11, mu12, mu21, mu22,\n                   v11, v12, v21, v22,\n                   r1in, r2in,\n                   N10, N20, R10, R20,\n                   m,\n                   mode) {\n  N1 <- c(N10)\n  N2 <- c(N20)\n  R1 <- c(R10)\n  R2 <- c(R20)\n  for(ti in 1:tt){\n    temp_N1 <- N1[ti]\n    temp_N2 <- N2[ti]\n    temp_R1 <- R1[ti]\n    temp_R2 <- R2[ti]\n    for(tii in 1:100){\n\n      mu1 <- mu11 * temp_R1 + mu21 * temp_R2\n      mu2 <- mu12 * temp_R1 + mu22 * temp_R2\n      \n      \n      dN1 <- (mu1  - m) * temp_N1 / 100\n      dN2 <- (mu2  - m) * N2[ti] / 100\n      dR1 <- ((r1in - temp_R1) - v11 * temp_N1 - v12 * temp_N2) / 100\n      dR2 <- ((r2in - temp_R2) - v21 * temp_N1 - v22 * temp_N2) / 100\n      \n      temp_N1 <- max(temp_N1 + dN1, 0)\n      temp_N2 <- max(temp_N2 + dN2, 0)\n      temp_R1 <- max(temp_R1 + dR1, 0)\n      temp_R2 <- max(temp_R2 + dR2, 0)\n      \n    }\n    \n    N1 <- c(N1, temp_N1)\n    N2 <- c(N2, temp_N2)\n    \n    R1 <- c(R1, temp_R1)\n    R2 <- c(R2, temp_R2)\n  }\n  return(data.frame(N1 = N1, N2 = N2, R1 = R1, R2 = R2, cc = 1:(tt+1)))\n  \n}\n\n\n# Define UI for app that draws a histogram ----\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n  fluidRow(\n\n           tabsetPanel(id = \"tabset\",\n                       tabPanel(\"Essential\",\n                                fluidRow(\n                                  column(4, \n                                         div(style=\"height: 80px;\",sliderInput('r1intab1', 'Supply R1', 1.4, min = 0.1, max = 1.8)),\n                                         div(style=\"height: 80px;\",sliderInput('r2intab1', 'Supply R2', 1.1, min = 0.1, max = 1.8))\n                                  ),\n                                  column(4,\n                                         div(style=\"height: 80px;\", sliderInput('mu11tab1', HTML(\"&mu;<sub>11</sub>\"), 1.5, min = 0.1, max = 2)),\n                                         div(style=\"height: 80px;\",sliderInput('mu12tab1', HTML(\"&mu;<sub>12</sub>\"), 0.4, min = 0.1, max = 2))\n                                  ),\n                                  column(4,\n                                         div(style=\"height: 80px;\",sliderInput('mu21tab1', HTML(\"&mu;<sub>21</sub>\"), 0.4, min = 0.1, max = 2)),\n                                         div(style=\"height: 80px;\",sliderInput('mu22tab1', HTML(\"&mu;<sub>22</sub>\"), 1.25, min = 0.1, max = 2))\n                                  )\n                                ),\n                                \n                                fluidRow(\n                                  column(4,\n                                         div(style=\"height: 80px;\", sliderInput('mtab1', HTML(\"m\"), 0.5, min = 0.1, max = 1))\n                                  ),\n                                  column(4,\n                                         div(style=\"height: 80px;\", sliderInput('q11', HTML(\"Q<sub>11</sub>\"), 1.5, min = 0.1, max = 3)),\n                                         div(style=\"height: 80px;\",sliderInput('q12', HTML(\"Q<sub>12</sub>\"), 2.6, min = 0.1, max = 3))\n                                  ),\n                                  column(4,\n                                         div(style=\"height: 80px;\",sliderInput('q21', HTML(\"Q<sub>21</sub>\"), 2.5, min = 0.1, max = 3)),\n                                         div(style=\"height: 80px;\",sliderInput('q22', HTML(\"Q<sub>22</sub>\"), 1.1, min = 0.1, max = 3))\n                                  )\n                                )\n                       ),\n                       tabPanel(\"Substitutable\",\n                                fluidRow(\n                                  column(4, \n                                         div(style=\"height: 80px;\",sliderInput('r1intab2', 'Supply R1', 1.4, min = 0.1, max = 1.8)),\n                                         div(style=\"height: 80px;\",sliderInput('r2intab2', 'Supply R2', 1.1, min = 0.1, max = 1.8))\n                                  ),\n                                  column(4,\n                                         div(style=\"height: 80px;\", sliderInput('mu11tab2', HTML(\"&mu;<sub>11</sub>\"), 1.5, min = 0.1, max = 2)),\n                                         div(style=\"height: 80px;\",sliderInput('mu12tab2', HTML(\"&mu;<sub>12</sub>\"), 0.4, min = 0.1, max = 2))\n                                  ),\n                                  column(4,\n                                         div(style=\"height: 80px;\",sliderInput('mu21tab2', HTML(\"&mu;<sub>21</sub>\"), 0.4, min = 0.1, max = 2)),\n                                         div(style=\"height: 80px;\",sliderInput('mu22tab2', HTML(\"&mu;<sub>22</sub>\"), 1.25, min = 0.1, max = 2))\n                                  )\n                                ),\n                                \n                                fluidRow(\n                                  column(4,\n                                         div(style=\"height: 80px;\", sliderInput('mtab2', HTML(\"m\"), 0.5, min = 0.1, max = 1))\n                                  ),\n                                  column(4,\n                                         div(style=\"height: 80px;\", sliderInput('v11', HTML(\"V<sub>11</sub>\"), 1.5, min = 0.1, max = 3)),\n                                         div(style=\"height: 80px;\",sliderInput('v12', HTML(\"V<sub>12</sub>\"), 2.6, min = 0.1, max = 3))\n                                  ),\n                                  column(4,\n                                         div(style=\"height: 80px;\",sliderInput('v21', HTML(\"V<sub>21</sub>\"), 2.5, min = 0.1, max = 3)),\n                                         div(style=\"height: 80px;\",sliderInput('v22', HTML(\"V<sub>22</sub>\"), 1.1, min = 0.1, max = 3))\n                                  )\n                                )\n                       )\n           ),\n           actionButton(\"go\", \"Plot\")),\n    \n    fluidRow(\n      column(12, \n      plotlyOutput(\"plot\", width=700, height = 300)\n    ))\n  \n)\n\nserver <- function(input, output, session) {\n  \n  \n  v <- reactiveValues(doPlot = FALSE)\n  \n  observeEvent(input$go, {\n    # 0 will be coerced to FALSE\n    # 1+ will be coerced to TRUE\n    v$doPlot <- input$go\n  })\n  \n  observeEvent(input$tabset, {\n    v$doPlot <- FALSE\n  })  \n  \n  \n  output$plot <- renderPlotly({\n    if (v$doPlot == FALSE) return()\n    \n    isolate({\n      data <- if (input$tabset == \"Essential\") {\n        \n        # sim lv model\n        sim_result <- reactive({\n          Sim_rc_ess(100, input$mu11tab1, input$mu12tab1, input$mu21tab1, input$mu22tab1,\n                 input$q11, input$q12, input$q21, input$q22,\n                 input$r1intab1, input$r2intab1, 0.1, 0.1, input$r1intab1, input$r2intab1, input$mtab1)\n        })\n        \n        R1_1 <-reactive({\n          input$mtab1 / input$mu11tab1 \n        })\n        \n        R2_1 <-reactive({\n          input$mtab1 / input$mu21tab1 \n        })\n        \n        R1_2 <-reactive({\n          input$mtab1 / input$mu12tab1 \n        })\n        \n        \n        R2_2 <- reactive({\n          input$mtab1 / input$mu22tab1\n        })\n        \n        \n        \n        \n        R_star <- data.frame(R1_star = c(rep(R1_1(), 100), seq(R1_1(), 10, length.out=100)),\n                             yrange1 = c(seq(R2_1(), 10, length.out=100), rep(R2_1(), 100)),\n                             R2_star = c(rep(R1_2(), 100), seq(R1_2(), 10, length.out=100)),\n                             yrange2 = c(seq(R2_2(), 10, length.out=100), rep(R2_2(), 100)))\n        \n        \n        p <- plot_ly(data = R_star) %>%\n          add_trace(x = ~R1_star, y = ~yrange1, type = 'scatter', mode = 'lines', name = 'dN1/dt = 0', line = list(color=\"#1c3144\", width = 3)) %>%\n          add_trace(x = ~R2_star, y = ~yrange2, type = 'scatter', mode = 'lines', name = 'dN2/dt = 0', line = list(color = '#d00000', width = 3))\n        \n        if((R1_1() - R2_1()) * (R1_2() - R2_2()) < 0){\n          R_eq_y <- max(R1_1(), R2_1())\n          R_eq_x <- max(R1_2(), R2_2())\n          \n          arrows <- reactive({data.frame(start_x = c(R_eq_x, R_eq_x),\n                                         start_y = c(R_eq_y, R_eq_y),\n                                         end_x = c(R_eq_x * 0.5, R_eq_x * 0.5),\n                                         end_y = c(R_eq_y - (R_eq_x - R_eq_x * 0.5) * input$q12 / input$q11,\n                                                   R_eq_y - (R_eq_x - R_eq_x * 0.5) * input$q22 / input$q21))})\n          \n          \n          p <- p %>% add_trace(x = R_eq_x, y = R_eq_y, type = 'scatter', mode = 'markers',\n                               name = 'Equilibrium', marker = list(color=\"black\", size = 10)) %>%\n            add_annotations(x = ~end_x,\n                            y = ~end_y,\n                            xref = \"x\", yref = \"y\",\n                            axref = \"x\", ayref = \"y\",\n                            text = \"\",\n                            showarrow = T,\n                            ax = ~start_x,\n                            ay = ~start_y,\n                            data = arrows())\n        }\n        \n      } else {\n        \n        # sim lv model\n        sim_result <- reactive({\n          Sim_rc_sub(100, input$mu11tab2, input$mu12tab2, input$mu21tab2, input$mu22tab2,\n                     input$v11, input$v12, input$v21, input$v22,\n                     input$r1intab2, input$r2intab2, 0.1, 0.1, input$r1intab2, input$r2intab2, input$mtab2)\n        })\n        \n        R1 <- seq(0, 20, 0.01)\n        \n        R2_1 <-reactive({\n          (input$mtab2 - input$mu11tab2 * R1) / input$mu21tab2 \n        })\n        \n        \n        R2_2 <- reactive({\n          (input$mtab2 - input$mu12tab2 * R1) / input$mu22tab2 \n        })\n        \n        R_star <- data.frame(R1 = R1, R2_1 = R2_1(), R2_2 = R2_2())\n        \n        # solve the linear equations\n        A <- matrix(c(input$mu11tab2, input$mu12tab2, input$mu21tab2, input$mu22tab2), 2, 2)\n        b <- c(input$mtab2, input$mtab2)\n        sol <- solve(A, b)\n        R_eq_x <- sol[1]\n        R_eq_y <- sol[2]\n        \n        p <- plot_ly(data = R_star) %>%\n          add_trace(x = ~R1, y = ~R2_1, type = 'scatter', mode = 'lines', name = 'dN1/dt = 0') %>%\n          add_trace(x = ~R1, y = ~R2_2, type = 'scatter', mode = 'lines', name = 'dN2/dt = 0')\n        \n        if(sol[1]>0 & sol[2]>0){\n          arrows <- reactive({data.frame(start_x = c(input$v11 * 1, input$v21 * 1),\n                                         start_y = c(R_eq_y - (R_eq_x - input$v11 * 1) * input$v12 / input$v11,\n                                                     R_eq_y - (R_eq_x - input$v21 * 1) * input$v22 / input$v21),\n                                         end_x = c(input$v11 * 0.1, input$v21 * 0.1),\n                                         end_y = c(R_eq_y - (R_eq_x - input$v11 * 0.1) * input$v12 / input$v11,\n                                                   R_eq_y - (R_eq_x - input$v21 * 0.1) * input$v22 / input$v21))})\n          \n          \n          p <- p %>% add_trace(x = R_eq_x, y = R_eq_y, type = 'scatter', mode = 'markers',\n                               name = 'Equilibrium', marker = list(color=\"black\", size = 10)) %>%\n            add_annotations(x = ~end_x,\n                            y = ~end_y,\n                            xref = \"x\", yref = \"y\",\n                            axref = \"x\", ayref = \"y\",\n                            text = \"\",\n                            showarrow = T,\n                            ax = ~start_x,\n                            ay = ~start_y,\n                            data = arrows())\n        }\n      }\n      p <- p %>% add_trace(x = sim_result()$R1, y = sim_result()$R2, type = 'scatter', mode = 'lines+markers', name = 'Trajectory', \n                           marker = list(color = sim_result()$cc, size =10), line = list(color = 'grey', width = 4))\n      \n      \n      # xlim\n      p <- p %>% layout(xaxis = list(range = c(0, 2)),\n                        yaxis = list(range = c(0, 2)))\n      \n      \n      \n      \n      p\n      \n    })\n  })\n  \n  \n}\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\nFor the substitutable resource model, you can play with the model by switching to \"Substitutable\".\n\n# References\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}