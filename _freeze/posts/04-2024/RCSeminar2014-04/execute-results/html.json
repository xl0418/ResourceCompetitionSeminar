{
  "hash": "685c4a8d2b01bbf59afb8130311d6ddb",
  "result": {
    "markdown": "---\ntitle: \"04 -- The resource-consumer competition model\"\nauthor: \"Christopher Klausmeier; Liang Xu\"\ndate: \"2024-02-15\"\ncategories: [Lectures]\nfilters:\n  - shinylive\n---\n\n\n\n\nPaper discussion: The three-species problem: incorporating competitive asymmetry and intransitivity in modern coexistence theory by **Ravi Ranjan**, **Thomas Koffel**, **Christopher A. Klausmeier**. (Link to the paper will be added soon)\n\nWe talked about the three species competition. There are many types of competition outcomes. They are determined by the 12 parameters in the model, i.e., the three intrinsic growth rates and 9 pairwise competition coefficients. The authors showed that the outcome of the competition is associated with the cyclic asymmetry, which is a triplet-wise quantity.\n\n> # Paper Abstract\n>\n> While natural communities can contain hundreds of species, modern coexistence theory focuses primarily on species pairs. Alternatively, the structural stability approach considers the feasibility of equilibria, gaining scalability to larger communities but sacrificing information about dynamic stability. Three-species competitive communities are a bridge to more-diverse communities. They display novel phenomena while remaining amenable to mathematical analysis, but remain incompletely understood. Here, we combine these approaches to identify the key quantities that determine the outcome of competition. We show that pairwise niche overlap and fitness differences are insufficient to completely characterize competitive outcomes, which requires a strictly triplet-wise quantity: cyclic asymmetry. Low pairwise niche overlap stabilizes the triplet, while high fitness differences promote competitive exclusion. The effect of cyclic asymmetry on stability is complex and depends on pairwise niche overlap. In summary, we elucidate how pairwise niche overlap, fitness differences, and cyclic asymmetry determine the outcome of three-species competition.\n\n# Model\n\nThe two-species resource-consumer competition model is defined as\n\n$$\n\\begin{aligned}\n\\frac{dN_1}{dt} &=  \\left(\\mu_1 - m \\right) N_1 \\\\\n\\frac{dN_2}{dt} &=  \\left(\\mu_2 - m \\right) N_2 \\\\\n\\frac{dR}{dt} &=  a \\left(R_{in}-R \\right) - V_1 N_1 - V_2 N_2\n\\end{aligned}\n$$\n\nwhere $N_1$, $N_2$ and $N_3$ are the population sizes of species 1, 2 and 3, respectively, $r_1$, $r_2$ and $r_3$ are the intrinsic growth rates, and $\\alpha_{ij}$s are the competition coefficients.\n\n# The simulation\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 700\n#| viewerWidth: 1000\n\nlibrary(shiny)\nlibrary(bslib)\nlibrary(plotly)\nlibrary(Matrix)\n\nSim_rc <- function(tt, mu11, mu12, mu21, mu22, v11, v12, v21, v22, m, a, r1in, r2in, N10, N20, R10, R20,\n                   mode = \"essential\") {\n  N1 <- c(N10)\n  N2 <- c(N20)\n  R1 <- c(R10)\n  R2 <- c(R20)\n  for(ti in 1:tt){\n    if(mode == \"essential\"){\n      mu1 <- min(mu11 * R1[ti], mu12 * R2[ti])\n      mu2 <- min(mu21 * R1[ti], mu22 * R2[ti])\n    } else {\n      mu1 <- mu11 * R1[ti] + mu21 * R2[ti]\n      mu2 <- mu12 * R1[ti] + mu22 * R2[ti]\n    }\n\n    dN1 <- (mu1  - m) * N1[ti]\n    dN2 <- (mu2  - m) * N2[ti]\n    N1 <- c(N1, N1[ti] + dN1)\n    N2 <- c(N2, N2[ti] + dN2)\n    \n    dR1 <- a * (r1in - R1[ti]) - v11 * N1[ti] - v12 * N2[ti]\n    dR2 <- a * (r2in - R2[ti]) - v21 * N1[ti] - v22 * N2[ti]\n    R1 <- c(R1, R1[ti] + dR1)\n    R2 <- c(R2, R2[ti] + dR2)\n  }\n  return(data.frame(N1 = N1, N2 = N2, R1 = R1, R2 = R2, cc = 1:(tt+1)))\n  \n}\n\n\n# Define UI for app that draws a histogram ----\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n  headerPanel(''),\n  \n  fluidRow(\n    column(12, \n           textOutput(\"text\"),\n           tags$head(tags$style(\"#text{color: black;\n                                 font-size: 30px;\n                                 font-style: italic;\n                                 }\"\n           )\n           ),\n           plotlyOutput(\"plot\", width=860)\n    )\n  ), \n  \n  fluidRow(\n    column(4, \n           div(style=\"height: 80px;\",sliderInput('r1', 'r1', 0.4, min = 0.1, max = 3)),\n           div(style=\"height: 80px;\",sliderInput('r2', 'r2', 1.1, min = 0.1, max = 3))\n    ),\n    column(4,\n           div(style=\"height: 80px;\", sliderInput('alpha11', HTML(\"&alpha;<sub>11</sub>\"), 1.5, min = 0.1, max = 5)),\n           div(style=\"height: 80px;\",sliderInput('alpha12', HTML(\"&alpha;<sub>12</sub>\"), 0.8, min = 0.1, max = 5))\n    ),\n    column(4,\n           div(style=\"height: 80px;\",sliderInput('alpha21', HTML(\"&alpha;<sub>21</sub>\"), 0.9, min = 0.1, max = 5)),\n           div(style=\"height: 80px;\",sliderInput('alpha22', HTML(\"&alpha;<sub>22</sub>\"), 1.1, min = 0.1, max = 5))\n    )\n  )\n  \n  \n)\n\nserver <- function(input, output, session) {\n  N1 <- seq(0, 20, 0.01)\n  N2_1 <-reactive({\n    (input$r1 - input$alpha11 * N1) / input$alpha12 \n  })\n  \n  N2_2 <- reactive({\n    (input$r2 - input$alpha21 * N1) / input$alpha22\n  })\n\n  \n  # sim lv model\n  sim_result <- reactive({\n    Sim_lotka_volterra(100, input$alpha11, input$alpha12, input$alpha21, input$alpha22, input$r1, input$r2, 0.1, 0.1)\n  })\n  \n  output$text <- renderText({\n    if(input$r1 / input$alpha11 > input$r2 / input$alpha21 & input$r1 / input$alpha12 >  input$r2 / input$alpha22){HTML(\"Case 1: Species 1 wins\")}\n    else if(input$r1 / input$alpha11 < input$r2 / input$alpha21 & input$r1 / input$alpha12 <  input$r2 / input$alpha22){\"Case 2: Species 2 wins\"}\n    else if(input$r1 / input$alpha11 < input$r2 / input$alpha21 & input$r1 / input$alpha12 >  input$r2 / input$alpha22){\"Case 3: Coexistence\"}\n    else if(input$r1 / input$alpha11 > input$r2 / input$alpha21 & input$r1 / input$alpha12 <  input$r2 / input$alpha22){\"Case 4: Founder control\"}\n    else {\"Case 5: Neutrality\"}\n    \n  })\n  \n  output$plot <- renderPlotly({\n    Ns <- data.frame(N1 = N1, N2_1 = N2_1(), N2_2 = N2_2())\n    pos_Ns <- Ns[Ns$N2_1 >= 0 | Ns$N2_2 >= 0,]\n    x_lim <- c(0, max(pos_Ns$N1) + 1)\n    y_lim <- c(0, max(pos_Ns$N2_1, pos_Ns$N2_2)+1)\n    p <- plot_ly(x = N1, y = N2_1(), type = 'scatter', mode = 'lines', name = 'dN1/dt = 0') %>%\n      add_trace(x = N1, y = N2_2(), type = 'scatter', mode = 'lines', name = 'dN2/dt = 0') %>%\n      add_trace(x = -1, y = -1, type = 'scatter', mode = 'markers', name = 'Stable equilibrium point',\n                marker = list(color = 'rgb(0, 0, 0)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                             width = 1\n                ))) %>%\n      add_trace(x = -2, y = -1, type = 'scatter', mode = 'markers', name = 'Unstable equilibrium point',\n                marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                             width = 1\n                ))) %>%\n      add_trace(x = sim_result()$N1, y = sim_result()$N2, type = 'scatter', mode = 'lines+markers', name = 'Trajectory', \n                marker = list(color = 'grey'), line = list(color = 'grey')) %>%\n      add_trace(x = 0.1, y=0.1, type = 'scatter', mode = 'markers', name = 'Initial condition',\n                marker = list(color = 'rgb(0, 0, 0)', size = 5, line = list(color = 'rgb(0, 0, 0)',\n                                                                             width = 1\n                )))\n    \n    if(input$r1 / input$alpha11 > input$r2 / input$alpha21 & input$r1 / input$alpha12 >  input$r2 / input$alpha22){\n      p <- p %>%\n        add_trace(x = input$r1 / input$alpha11, y = 0, type = 'scatter', mode = 'markers', name = 'Stable equilibrium point',\n                  marker = list(color = 'rgb(0, 0, 0)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                               width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = 0, y = input$r2 / input$alpha22, type = 'scatter', mode = 'markers', name = 'Unstable equilibrium point',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                               width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = 0, y = 0, type = 'scatter', mode = 'markers', name = 'Unstable equilibrium point',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                                     width = 1\n                  )), showlegend = FALSE) %>%\n        layout(xaxis = list(title = 'N1', range = x_lim), yaxis = list(title = 'N2', range = y_lim))\n    } else if(input$r1 / input$alpha11 < input$r2 / input$alpha21 & input$r1 / input$alpha12 <  input$r2 / input$alpha22){\n\n        p <- p %>%\n          add_trace(x = input$r1 / input$alpha11, y = 0, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                               width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = 0, y = input$r2 / input$alpha22, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(0, 0, 0)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                               width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = 0, y = 0, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                                     width = 1\n                  )), showlegend = FALSE) %>%\n        layout(xaxis = list(title = 'N1', range = x_lim), yaxis = list(title = 'N2', range = y_lim))\n    } else if(input$r1 / input$alpha11 < input$r2 / input$alpha21 & input$r1 / input$alpha12 >  input$r2 / input$alpha22){\n      sol <- reactive({solve(matrix(c(input$alpha11, input$alpha21, input$alpha12, input$alpha22), 2, 2), c(input$r1, input$r2))})\n      \n      p <- p %>%\n        add_trace(x = sol()[1], y = sol()[2], type = 'scatter', mode = 'markers', name = '',\n                       marker = list(color = 'rgb(0, 0, 0)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                                    width = 1\n                       )), showlegend = FALSE) %>%\n        add_trace(x = input$r1 / input$alpha11, y = 0, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                                     width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = 0, y = input$r2 / input$alpha22, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                               width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = 0, y = 0, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                                     width = 1\n                  )), showlegend = FALSE) %>%\n        layout(xaxis = list(title = 'N1', range = x_lim), yaxis = list(title = 'N2', range = y_lim))\n      \n    } else if(input$r1 / input$alpha11 > input$r2 / input$alpha21 & input$r1 / input$alpha12 <  input$r2 / input$alpha22){\n      sol <- reactive({solve(matrix(c(input$alpha11, input$alpha21, input$alpha12, input$alpha22), 2, 2), c(input$r1, input$r2))})\n      \n      p <- p %>%\n        add_trace(x = sol()[1], y = sol()[2], type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                               width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = input$r1 / input$alpha11, y = 0, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(0, 0, 0)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                               width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = 0, y = input$r2 / input$alpha22, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(0, 0, 0)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                                     width = 1\n                  )), showlegend = FALSE) %>%\n        add_trace(x = 0, y = 0, type = 'scatter', mode = 'markers', name = '',\n                  marker = list(color = 'rgb(255, 255, 255)', size = 10, line = list(color = 'rgb(0, 0, 0)',\n                                                                                     width = 1\n                  )), showlegend = FALSE) %>%\n        layout(xaxis = list(title = 'N1', range = x_lim), yaxis = list(title = 'N2', range = y_lim))\n    } else {\n      p <- p %>%\n        layout(xaxis = list(title = 'N1', range = x_lim), yaxis = list(title = 'N2', range = y_lim))\n    }\n    \n    p\n  })\n  \n}\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\n# References\n\n**Ravi Ranjan**, **Thomas Koffel**, **Christopher A. Klausmeier**, The three-species problem: incorporating competitive asymmetry and intransitivity in modern coexistence theory, 2024, in press.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}