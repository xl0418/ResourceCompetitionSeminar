{
  "hash": "9ae9c86f4988d91d7dd6effd5353f532",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"01 -- Lotka-Volterra competition model and the modern coexistence theory\"\nauthor: \"Christopher klausmeier; Liang Xu\"\ndate: \"2024-01-29\"\ncategories: [Lectures]\nfilters:\n  - shinylive\n---\n\n\n\n\n# Two-species Lotka-Volterra competition model\n\nThe model is given by\n\n$$\n\\begin{aligned}\n\\frac{dN_1}{dt} &= r_1 \\left(1 - \\alpha_{11} N_1 - \\alpha_{12} N_2\\right) N_1 \\\\\n\\frac{dN_2}{dt} &= r_2 \\left(1 - \\alpha_{21} N_1 - \\alpha_{22} N_2\\right) N_2\n\\end{aligned}\n$$\n\nwhere $N_1$ and $N_2$ are the population sizes of species 1 and 2, respectively, $r_1$ and $r_2$ are the intrinsic growth rates, and $\\alpha_{ij}$s are the competition coefficients.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the model\nSim_lotka_volterra <- function(tt, alpha11, alpha12, alpha21, alpha22, r1, r2, N10, N20) {\n  N1 <- c(N10)\n  N2 <- c(N20)\n  for(ti in 1:tt){\n    dN1 <- r1 * (1 - alpha11 * N1[ti] - alpha12 * N2[ti]) * N1[ti]\n    dN2 <- r2 * (1 - alpha21 * N1[ti] - alpha22 * N2[ti]) * N2[ti]\n    N1 <- c(N1, N1[ti] + dN1)\n    N2 <- c(N2, N2[ti] + dN2)\n  }\n  return(data.frame(N1 = N1, N2 = N2))\n\n}\n```\n:::\n\n\n# The phase-plane analysis\n\nThe zero-net growth isoclines are given by:\n\n$$\n\\begin{aligned}\n\\frac{dN_1}{dt} &= 0 \\Rightarrow N_1 = \\frac{1}{\\alpha_{11}} \\left(1 - \\alpha_{12} N_2\\right) \\\\\n\\frac{dN_2}{dt} &= 0 \\Rightarrow N_2 = \\frac{1}{\\alpha_{22}} \\left(1 - \\alpha_{21} N_1\\right)\n\\end{aligned}\n$$\n\nPlot the isoclines in the phase plane.\n\nThe equilibrium points are the intersection of the isoclines.\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\n#| viewerWidth: 1000\nlibrary(shiny)\nlibrary(bslib)\nlibrary(plotly)\n\n# Define UI for app that draws a histogram ----\nui <- fluidPage(\n  headerPanel('Two species isoclines'),\n  sidebarPanel(\n    numericInput('alpha11', 'Alpha 11', 1.5, min = 1, max = 10),\n    numericInput('alpha12', 'Alpha 12', 0.8, min = 1, max = 10),\n    numericInput('alpha21', 'Alpha 21', 0.9, min = 1, max = 10),\n    numericInput('alpha22', 'Alpha 22', 1.1, min = 1, max = 10),\n    width = 2\n  ),\n  mainPanel(\n    plotlyOutput(\"plot\", width=900)\n  )\n  \n)\n\nserver <- function(input, output, session) {\n  N1 <- seq(0, 20, 0.01)\n  N2_1 <-reactive({\n    (1 - input$alpha11 * N1) / input$alpha12 \n  })\n  \n  N2_2 <- reactive({\n    (1 - input$alpha21 * N1) / input$alpha22\n  })\n  \n  rank_A <- reactive({\n    rankMatrix(matrix(c(input$alpha11, input$alpha21, input$alpha12, input$alpha22), 2, 2))\n  })\n  \n  \n  output$plot <- renderPlotly({\n    Ns <- data.frame(N1 = N1, N2_1 = N2_1(), N2_2 = N2_2())\n    pos_Ns <- Ns[Ns$N1 >= 0 & Ns$N2_1 >= 0 | Ns$N2_2 >= 0,]\n    x_lim <- range(pos_Ns$N1)\n    y_lim <- range(0, max(pos_Ns$N2_1, pos_Ns$N2_2))\n    if(rank_A()[1] == 2){\n      sol <- solve(matrix(c(input$alpha11, input$alpha21, input$alpha12, input$alpha22), 2, 2), c(1, 1))\n      p <- plot_ly(x = N1, y = N2_1(), type = 'scatter', mode = 'lines', name = 'dN1/dt = 0') %>%\n        add_trace(x = N1, y = N2_2(), type = 'scatter', mode = 'lines', name = 'dN2/dt = 0') %>%\n        add_trace(x = sol[1], y = sol[2], type = 'scatter', mode = 'markers', name = 'Equilibrium point') %>%\n        layout(xaxis = list(title = 'N1', range = x_lim), yaxis = list(title = 'N2', range = y_lim))\n    } else {\n      p <- plot_ly(x = N1, y = N2_1(), type = 'scatter', mode = 'lines', name = 'dN1/dt = 0') %>%\n        add_trace(x = N1, y = N2_2(), type = 'scatter', mode = 'lines', name = 'dN2/dt = 0') %>%\n        layout(xaxis = list(title = 'N1', range = x_lim), yaxis = list(title = 'N2', range = y_lim))\n    }\n    p\n  })\n  \n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\nThe Jacobian matrix is given by:\n\n$$\nJ = \\begin{pmatrix}\n\\frac{\\partial f_1}{\\partial N_1} & \\frac{\\partial f_1}{\\partial N_2} \\\\\n\\frac{\\partial f_2}{\\partial N_1} & \\frac{\\partial f_2}{\\partial N_2}\n\\end{pmatrix}\n$$\n\nwhere $f_1 = r_1 \\left(1 - \\alpha_{11} N_1 - \\alpha_{12} N_2\\right) N_1$ and $f_2 = r_2 \\left(1 - \\alpha_{21} N_1 - \\alpha_{22} N_2\\right) N_2$. The eigenvalues of the Jacobian matrix determine the stability of the equilibrium points.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}